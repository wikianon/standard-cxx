/****************************************************************************
**
** Copyright (c) 2006-2007 Captive Metrics Software Corporation.
**                    All rights reserved.
**
** This file is part of the Captive Metrics library of Captivity.
**
** This file may be used under the terms of the GNU General Public
** License version 2.0 as published by the Free Software Foundation
** and appearing in the file LICENSE-GPL.txt contained within the
** same package as this file. This software is subject to a
** dual-licensing mechanism, the details of which are outlined in
** file LICENSE-DUAL.txt, also contained within this package. Be sure
** to use the correct license for your needs. To view the commercial
** license, read LICENSE-COMMERCIAL.txt also contained within this
** package.
**
** If you do not have access to these files or are unsure which license
** is appropriate for your use, please contact the sales department at
** sales@captivemetrics.com.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/

package com.capmet.metrics.jmdr;

import java.util.ResourceBundle;
import com.capmet.metrics.jmdr.mdr_exception_t;

/**
 * The abstract base class for all <CODE>mdr</CODE> classes.
 * <p>
 * @author Richard Pettit
 * @since JDK 1.5
 * @version 1.0
 */
public abstract class mdr_t
{
    // class names for mdr_category_t
    public final static String MDR_CACHE_NAME       = "Caches";
    public final static String MDR_CPU_NAME         = "CPU Utilization Data";
    public final static String MDR_CPUINFO_NAME     = "CPU Information";
    public final static String MDR_CPUSTAT_NAME     = "Global CPU Metrics";
    public final static String MDR_CTLR_NAME        = "Controllers";
    public final static String MDR_CTLRSTAT_NAME    = "Controller Metrics";
    public final static String MDR_DISK_NAME        = "Disks";
    public final static String MDR_ICMP_NAME        = "ICMP Protocol";
    public final static String MDR_IOSTAT_NAME      = "Disk Metrics";
    public final static String MDR_IP_NAME          = "IP Protocol";
    public final static String MDR_MEMORY_NAME      = "Memory Data";
    public final static String MDR_MISC_NAME        = "Miscellaneous Data";
    public final static String MDR_MNT_NAME         = "Mount Points";
    public final static String MDR_MP_NAME          = "Per-CPU Data";
    public final static String MDR_MPSTAT_NAME      = "Per-CPU Metrics";
    public final static String MDR_NETIF_NAME       = "Network Interfaces";
    public final static String MDR_PF_NAME          = "Paging Files";
    public final static String MDR_PS_NAME          = "Processes";
    public final static String MDR_SYSTAT_NAME      = "System Metrics";
    public final static String MDR_TCP_NAME         = "TCP Protocol";
    public final static String MDR_THREAD_NAME      = "Threads";
    public final static String MDR_UDP_NAME         = "UDP Protocol";
    public final static String MDR_PROC_STATES_NAME = "Process States";
    public final static String MDR_NETSTAT_NAME     = "Interface Metrics";

    /**
     * The name of the category.
     */
    public String          mdr_category_name;
    /**
     * Is this category supported?
     */
    public boolean         mdr_category_supported;
    /**
     * The number of fields in this category.
     */
    public int             mdr_field_count;
    /**
     * Is this category a singleton?
     */
    public boolean         mdr_is_singleton;

    private native Boolean  is_supported(int field_number);
    private native String   field_name(int field_number);
    private native String   field_explanation(int field_number);
    private native int      field_name_to_number(String field_name);
    private native String   category_explanation();

    /**
     * The localized messages.
     */
    public static ResourceBundle msgs;

    static {
        msgs =
            ResourceBundle.getBundle("com.capmet.metrics.jmdr.MessagesBundle");
    }

    /**
     * The reason string generated by the native code in case of error.
     */
    protected String reason;
    
    /**
     * A handle to the C++ class object.
     */
    protected long handle;

    /**
     * Determine if a field is supported.
     *
     * @param field_number The numeric field number of the category.
     * @throws mdr_exception_t Thrown from JNI code.
     * @return True - field is supported; false - it is not.
     */
    public boolean mdr_is_supported(int field_number)
        throws mdr_exception_t
    {
        Boolean b = is_supported(field_number);

        if (b == null)
            throw new mdr_exception_t(reason);

        return b.booleanValue();
    }

    /**
     * Retrieve the name of a field.
     *
     * @param field_number The numeric field number of the category.
     * @throws mdr_exception_t Thrown from JNI code.
     * @return The field name of the given field number.
     */
    public String mdr_field_name(int field_number)
        throws mdr_exception_t
    {
        String s = field_name(field_number);

        if (s == null)
            throw new mdr_exception_t(reason);

        return s;
    }

    /**
     * Retrieve the explanation text of a field.
     *
     * @param field_number The numeric field number of the category.
     * @throws mdr_exception_t Thrown from JNI code.
     * @return The field explanation of the given field number.
     */
    public String mdr_field_explanation(int field_number)
        throws mdr_exception_t
    {
        String s = field_explanation(field_number);

        if (s == null)
            throw new mdr_exception_t(reason);

        return s;
    }

    /**
     * Retrieve the explanation text of the category.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     * @return The explanation for the category.
     */
    public String mdr_category_explanation()
        throws mdr_exception_t
    {
        String s = category_explanation();

        if (s == null)
            throw new mdr_exception_t(reason);

        return s;
    }

    /**
     * Convert a field name to its numeric field value.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     * @return The numeric value of the field name or -1 if it is not
     * a valid field name.
     */
    public int mdr_field_name_to_number(String field_name)
        throws mdr_exception_t
    {
        int i = field_name_to_number(field_name);

        if (i == -1)
            throw new mdr_exception_t(reason);

        return i;
    }

    /**
     * Retrieve the value of the field given the field number. This version
     * of the method always throws. Singleton classes must redefine this
     * method.
     *
     * @param field_number The numeric field number of the category.
     * @throws mdr_exception_t Thrown from JNI code.
     * @return An <CODE>Object</CODE> which must be casted to the
     * appropriate type.
     */
    public Object mdr_field_value(int field_number) throws mdr_exception_t
    {
        throw new mdr_exception_t(
            "mdr_t::mdr_field_value: " + msgs.getString("req_key"));
    }

    /**
     * Retrieve the value of the field given the field number. This version
     * of the method always throws. N-tuple classes must redefine this
     * method.
     *
     * @param key The instance name from the n-tuple.
     * @param field_number The numeric field number of the category.
     * @throws mdr_exception_t Thrown from JNI code.
     * @return An <CODE>Object</CODE> which must be casted to the
     * appropriate type.
     */
    public Object mdr_field_value(String key, int field_number)
        throws mdr_exception_t
    {
        throw new mdr_exception_t(
            "mdr_t::mdr_field_value: " + msgs.getString("no_req_key"));
    }

    /**
     * Retrieve the instance names from the n-tuple. This version of the
     * method always throws. N-tuple classes must redefine this method.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     * @return An array of <CODE>String</CODE> containing the names of
     * the instances from the n-tuple.
     */
    public String[] mdr_keyset() throws mdr_exception_t
    {
        throw new mdr_exception_t(
            "mdr_t::mdr_keyset: " + msgs.getString("obj_single"));
    }

    private native String[] all_field_names();
    private native String[] supported_field_names();

    /**
     * Retrieve the names of all of the fields of the category.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     * @return An array of <CODE>String</CODE> containing the field names.
     */
    public String[] mdr_all_field_names() throws mdr_exception_t
    {
        String[] retVal = all_field_names();

        if (retVal == null)
            throw new mdr_exception_t(reason);

        return retVal;
    }

    /**
     * Retrieve the names of the supported fields of the category.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     * @return An array of <CODE>String</CODE> containing the field names.
     */
    public String[] mdr_supported_field_names() throws mdr_exception_t
    {
        String[] retVal = supported_field_names();

        if (retVal == null)
            throw new mdr_exception_t(reason);

        return retVal;
    }

    /**
     * Refresh the values of the fields of the category.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     */
    public abstract void mdr_refresh() throws mdr_exception_t;
    /**
     * Compute the difference for all rate fields of the category.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     */
    public abstract void mdr_rates() throws mdr_exception_t;

    /**
     * Retrieve all the field names of the catetory and compute the difference
     * for all rate fields of the category.
     *
     * @throws mdr_exception_t Thrown from JNI code.
     */
    public void mdr_refresh_rates() throws mdr_exception_t
    {
        mdr_refresh();
        mdr_rates();
    }
}
