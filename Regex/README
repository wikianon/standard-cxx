
http://www.informit.com/articles/article.aspx?p=2064649&seqNum=3
https://msdn.microsoft.com/en-us/library/bb982727.aspx
https://pt.stackoverflow.com/questions/94094/o-que-%C3%A9-uma-express%C3%A3o-regular-gulosa
https://pt.stackoverflow.com/questions/272539/regex-para-validar-determinado-formato-de-data
https://pt.stackoverflow.com/questions/245172/regex-que-valida-somente-anos-normais-e-bissextos-em-c?noredirect=1&lq=1
https://pt.stackoverflow.com/questions/54657/express%C3%A3o-regular-para-datas-sem-separador
https://stackoverflow.com/questions/15491894/regex-to-validate-date-format-dd-mm-yyyy/26972181#26972181 


//validas arquivos com as extensoes da regex
const std::regex pattern(".*[.](h|hpp|hxx|H|HPP|HXX|c|cpp|cxx|C|CPP|CXX|aspx|php|py|java|rb|d|htm|html|HTM|HTML|mp3|css)");


dd/MM/yyyy:
Checks if leap year. Years from 1900 to 9999 are valid. Only dd/MM/yyyy

(^(((0[1-9]|1[0-9]|2[0-8])\/(0[1-9]|1[012]))|((29|30|31)\/(0[13578]|1[02]))|((29|30)\/(0[4,6,9]|11)))\/(19|[2-9][0-9])\d\d$)|(^29\/02\/(19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)$)
R"(^((((0[1-9]|1[0-9]|2[0-8])([-/.])(0?[1-9]|1[0-2]|[Jj](?:an|u[nl])|[Mm]a[ry]|[Aa](?:pr|ug)|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec|[Ff]eb))|((29|30|31)([-/.])(0?[13578]|1[02]|[Jj](?:an|ul)|[Mm]a[ry]|[Aa]ug|[Oo]ct|[Dd]ec))|((29|30)([-/.])(?:0?[469]|11|[Aa]pr|[Jj]un|[Ss]ep|[Nn]ov)))(?:\5|\9|\13)(19|[2-9][0-9])\d\d$)|(^29([-/.])(0?2|[Ff]eb)\17(19|[2-9][0-9])(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96))$)"


MM/dd/yyyy or MM-dd-yyyy:
^(((0[13-9]|1[012])\/?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])\/?31|02\/?(0[1-9]|1[0-9]|2[0-8]))\/?[0-9]{4}|02\/?29\/?([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00))$
R"(^(((0?[13-9]|1[0-2]|[Jj](?:an|u[nl])|[Mm]a[ry]|[Aa](?:pr|ug)|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec)([-/.])?(0?[1-9]|[12][0-9]|30)|(0?[13578]|1[02]|[Jj](?:an|ul)|[Mm]a[ry]|[Aa]ug|[Oo]ct|[Dd]ec)([-/.])?31|(0?2|[Ff]eb)([-/.])?(0?[1-9]|1[0-9]|2[0-8]))(?:\4|\7|\8)?[0-9]{4}|(0?2|[Ff]eb)([-/.])?29\10([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00))$)"


dd/MM/yyyy or dd-MM-yyyy:
^(((0[1-9]|[12][0-9]|30)\/?(0[13-9]|1[012])|31\/?(0[13578]|1[02])|(0[1-9]|1[0-9]|2[0-8])\/?02)\/?[0-9]{4}|29\/?02\/?([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00))$
R"(^(?:(?:(0?[1-9]|1\d|2[0-8])([-/.])(0?[1-9]|1[0-2]|[Jj](?:an|u[nl])|[Mm]a[ry]|[Aa](?:pr|ug)|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec|[Ff]eb)|(29|30)([-/.])(0?[13-9]|1[0-2]|[Jj](?:an|u[nl])|[Mm]a[ry]|[Aa](?:pr|ug)|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec)|(31)([-/.])(0?[13578]|1[02]|[Jj]an|[Mm]a[ry]|[Jj]ul|[Aa]ug|[Oo]ct|[Dd]ec))(?:\2|\5|\8)(0{2,3}[1-9]|0{1,2}[1-9]\d|0?[1-9]\d{2}|[1-9]\d{3})|(29)([-/.])(0?2|[Ff]eb)\12(\d{1,2}(?:0[48]|[2468][048]|[13579][26])|(?:0?[48]|[13579][26]|[2468][048])00))$)"


yyyy-MM-dd or yyyy/MM/dd:
^([0-9]{4}\/?((0[13-9]|1[012])\/?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])\/?31|02\/?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)\/?02\/?29)$
^([0-9]{4}(?:\4|\7|\8)?((0[13-9]|1[012])([-/.])?(0[1-9]|[12][0-9]|30)|(0[13578]|1[02])([-/.])?31|02([-/.])?(0[1-9]|1[0-9]|2[0-8]))|([0-9]{2}(([2468][048]|[02468][48])|[13579][26])|([13579][26]|[02468][048]|0[0-9]|1[0-6])00)([-/.])?(02)\14(29))$

yyyy/MM/dd:
^(?:\d{4}\/(?:(?:(?:(?:0[13578]|1[02])\/(?:0[1-9]|[1-2][0-9]|3[01]))|(?:(?:0[469]|11)\/(?:0[1-9]|[1-2][0-9]|30))|(?:02\/(?:0[1-9]|1[0-9]|2[0-8]))))|(?:(?:\d{2}(?:0[48]|[2468][048]|[13579][26]))|(?:(?:[02468][048])|[13579][26])00)\/02\/29)$


  const std::regex pattern(
                           R"(^(?:(?:(0?[1-9]|1\d|2[0-8])([-/.])(0?[1-9]|1[0-2]|j(?:an|u[nl])|[m]a[ry]|a(?:pr|ug)|sep|oct|nov|dec|feb)|(29|30)([-/.])(0?[13-9]|1[0-2]|j(?:an|u[nl])|[m]a[ry]|a(?:pr|ug)|sep|oct|nov|dec)|(31)([-/.])(0?[13578]|1[02]|jan|[m]a[ry]|jul|aug|oct|dec))(?:\2|\5|\8)(0{2,3}[1-9]|0{1,2}[1-9]\d|0?[1-9]\d{2}|[1-9]\d{3})|(29)([-/.])(0?2|feb)\12(\d{1,2}(?:0[48]|[2468][048]|[13579][26])|(?:0?[48]|[13579][26]|[2468][048])00))$)",
                           std::regex_constants::icase
                          );

We could simplify the regular expression:
yyyy-MM-dd:
^(?:\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[1-2][0-9]|3[01])|(?:0[469]|11)-(?:0[1-9]|[1-2][0-9]|30)|02-(?:0[1-9]|1[0-9]|2[0-8]))|\d{2}(?:[02468][048]|[13579][26])-02-29)

^(?:\d{4}([-/.])(?:(?:0[13578]|1[02])-(?:0[1-9]|[1-2][0-9]|3[01])|(?:0[469]|11)-(?:0[1-9]|[1-2][0-9]|30)|02-(?:0[1-9]|1[0-9]|2[0-8]))|\d{2}(?:[02468][048]|[13579][26])([-/.])02\2(29))$

##########################################################################################################################
Regex não são uma boa alternativa para este problema. 
Pois esse é um problema matemático e regex não sabem fazer contas, 
elas apenas avaliam repetições em strings.

Entretanto, como um exercício de curiosidade, vamos usar regex mesmo assim.

Primeiro, comecemos com algo que reconheça um número de 01 a 28 (dias que têm em todos os meses):

(?:0[1-9]|1[0-9]|2[0-8])


Algo que reconheça um número de 01 a 12:

(?:0[1-9]|1[0-2])


Juntando os dois:

(?:0[1-9]|1[0-9]|2[0-8])\/(?:0[1-9]|1[0-2])


Para os meses com 30 ou 31 dias:

(?:(?:29|30)\/(?:01|0[3-9]|1[0-2]))|(?:31\/(?:01|03|05|07|08|10|12))


Algo que reconheça números de anos a partir de 1583:

(?:[2-9][0-9]{3}|1[6-9][0-9]{2}|159[0-9]|158[3-9])


Juntando tudo:

(?:(?:0[1-9]|1[0-9]|2[0-8])\/(?:0[1-9]|1[0-2])|(?:(?:29|30)\/(?:01|0[3-9]|1[0-2]))|(?:31\/(?:01|03|05|07|08|10|12)))\/(?:[2-9][0-9]{3}|1[6-9][0-9]{2}|159[0-9]|158[3-9])


Essa foi a parte fácil. Isso reconhece todos os dias que não sejam 29 de fevereiro.

Nos dias que são 29 de fevereiro, o dia e o mês são fáceis:

29\/02


Os últimos dois dígitos de anos que sempre são bissextos:

(?:04|08|[2468][048]|[13579][26])


Assim, esses anos não terminados em 00 são bissextos:

(?:[2-9](?:04|08|[2468][048]|[13579][26])|1[6-9](?:04|08|[2468][048]|[13579][26])|159(?:2|6)|158(?:4|8))


Esses são os anos desde 1583 terminados em 00 e bissextos:

(?:16|[2468][048]|[3579][26])00


Combinando-se isso, chega-se a todos os 29 de fevereiros desde 1583:

29\/02\/(?:(?:[2-9](?:04|08|[2468][048]|[13579][26])|1[6-9](?:04|08|[2468][048]|[13579][26])|159(?:2|6)|158(?:4|8))|(?:16|[2468][048]|[3579][26])00)


Combinando-se todos:

(?:(?:0[1-9]|1[0-9]|2[0-8])\/(?:0[1-9]|1[0-2])|(?:(?:29|30)\/(?:01|0[3-9]|1[0-2]))|(?:31\/(?:01|03|05|07|08|10|12)))\/(?:[2-9][0-9]{3}|1[6-9][0-9]{2}|159[0-9]|158[3-9])|29\/02\/(?:(?:[2-9](?:04|08|[2468][048]|[13579][26])|1[6-9](?:04|08|[2468][048]|[13579][26])|159(?:2|6)|158(?:4|8))|(?:16|[2468][048]|[3579][26])00)



####################################################################################################################################

  //regex valida datas e anos bisextos nos formatos yyyy/[A|a]/dd ou yyyy/m/dd | yyyy.[A|a].dd ou yyyy.m.dd | yyyy-[A|a]-dd ou yyyy-m-dd
  ^(?:\\d{4}(?:\1|\2|\3)(?:(?:(?:(?:0[13578]|1[02]|(?:[J|j]an|[M|m]ar|[M|m]ay|[J|j]ul|[A|a]ug|[O|o]ct|[D|d]ec))([-/.])(?:0[1-9]|[1-2][0-9]|3[01]))|(?:(?:0[469]|11|(?:[A|a]pr|[J|j]un|[S|s]ep|[N|n]ov))([-/.])(?:0[1-9]|[1-2][0-9]|30))|(?:(?:02|[F|f]eb)([-/.])(?:0[1-9]|1[0-9]|2[0-8]))))|(?:(?:\\d{2}(?:0[48]|[2468][048]|[13579][26]))|(?:(?:[02468][048])|[13579][26])00)([-/.])(?:02|[F|f]eb)\5(29))$
  
  const std::regex pattern(
                           "^(?:\\d{4}([-/.])(?:(?:(?:(?:0[13578]|1[02]|(?:[J|j]an|[M|m]ar|[M|m]ay|[J|j]ul|[A|a]ug|[O|o]ct|"
                           "[D|d]ec))([-/.])(?:0[1-9]|[1-2][0-9]|3[01]))|(?:(?:0[469]|11|(?:[A|a]pr|[J|j]un|[S|s]ep|[N|n]ov))[-/.]"
                           "(?:0[1-9]|[1-2][0-9]|30))|(?:(?:02|[F|f]eb)([-/.])(?:0[1-9]|1[0-9]|2[0-8]))))|(?:(?:\\d{2}(?:0[48]|[2468][048]|"
                           "[13579][26]))|(?:(?:[02468][048])|[13579][26])00)([-/.])(?:02|[F|f]eb)[-/.]29)$"
                          );
                          
                          
 ///regex valida datas e anos bisextos nos formatos dd/mm/yyyy ou dd/[A|a]/yyyy | dd.mm.yyyy ou dd.[A|a].yyyy | dd-mm-yyyy ou dd-[A|a]-yyyy
 ^(?:(?:0[1-9]|1[0-9]|2[0-8])([-/.])(?:0[1-9]|1[0-2]|(?:[Jj]an|[Ff]eb|(?:[Mm](?:a[ry]))|(?:[Aa](?:pr|ug))|(?:[Jj](?:u[nl]))|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec))|(?:(?:29|30)([-/.])(?:0[13456789]|1[0-2]|(?:[Jj]an|(?:[Mm](?:a[ry]))|(?:[Aa](?:pr|ug))|(?:[Jj](?:u[nl]))|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec)))|(?:31([-/.])(?:0[13578]|1[02]|(?:[Jj]an|(?:[Mm](?:a[ry]))|[Jj]ul|[Aa]ug|[Oo]ct|[Dd]ec))))(?:\1|\2|\3)(?:[2-9][0-9]{3}|1[6-9][0-9]{2}|159[0-9]|158[3-9])|29([-/.])(?:02|[Ff]eb)\4(?:(?:[2-9](?:04|08|[2468][048]|[13579][26])|1[6-9](?:(?:04|08|[2468][048]|[13579][26])00)|159(?:2|6)|158(?:4|8))|(?:16|[2468][048]|[3579][26])00)$
 
 const std::regex pattern(
                          "^(?:(?:0[1-9]|1[0-9]|2[0-8])([-/.])(?:0[1-9]|1[0-2]|(?:[Jj]an|[Ff]eb|(?:[Mm](?:a[ry]))|(?:[Aa](?:pr|ug))|(?:[Jj](?:u[nl]))|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec))|"
                          "(?:(?:29|30)([-/.])(?:0[13456789]|1[0-2]|(?:[Jj]an|(?:[Mm](?:a[ry]))|(?:[Aa](?:pr|ug))|(?:[Jj](?:u[nl]))|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec)))|"
                          "(?:31([-/.])(?:0[13578]|1[02]|(?:[Jj]an|(?:[Mm](?:a[ry]))|[Jj]ul|[Aa]ug|[Oo]ct|[Dd]ec))))([-/.])(?:[2-9][0-9]{3}|1[6-9][0-9]{2}|159[0-9]|158[3-9])|"
                          "29([-/.])(?:02|[Ff]eb)([-/.])(?:(?:[2-9](?:04|08|[2468][048]|[13579][26])|1[6-9](?:(?:04|08|[2468][048]|[13579][26])00)|159(?:2|6)|158(?:4|8))|(?:16|[2468][048]|[3579][26])00)$"
                         );
                          
#######################################################################################################################################################

R"(^(\d\d)([-./])(0[1-9]|1[0-2]|[[:alpha:]]{3})\2(\d{4,})$)"
//   ^^^^  ^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^ ^^^^^^
//   ||||  |||||  |||||||||||||||||||||||||||| || ||||||
//   ||||  |||||  |||||||||||||||||||||||||||| || Grupo 4: quatro dígitos ou mais para o ano
//   ||||  |||||  |||||||||||||||||||||||||||| Backreference ao valor do grupo 2
//   ||||  |||||  Grupo 3: meses numéricos de "01" a "09" ou "10" a "12", ou com três letras
//   ||||  Grupo 2: separador ("-", "." ou "/")
//   Grupo 1: dois dígitos para o dia


R"(^(\d{4})([-./])(0?[1-9]|1[0-2]|[[:alpha:]]{3})\2(\d\d)$)"

R"(^(\d{4})([-./])(?:(?:0?[13578]|1[02]|j(?:an|u[nl])|ma[ry]|aug|oct|dec)|[[:alpha:]]{3}\2(?:0?[1-9]|1[0-9]|2[0-9]|3[01]))\2(\d\d)$)"

R"(^(?:\\d{4}(?:\1|\2|\4)(?:(?:(?:(?:0?[13578]|1[02]|j(?:an|u[nl])|ma[ry]|aug|oct|dec)([-/.])(?:0?[1-9]|1[0-9]|2[0-9]|3[01]))|(?:(?:0[469]|11|apr|jun|sep|nov)([-/.])(?:0?[1-9]|[1-2][0-9]|30))|(?:(0?2|feb)([-/.])(?:0?[1-9]|1[0-9]|2[0-8]))))|(?:(?:\\d{2}(?:0[48]|[2468][048]|[13579][26]))|(?:(?:[02468][048])|[13579][26])00)([-/.])(0?2|feb)\5(29))$)"

R"(^(?:\\d{4}([-/.])(?:(?:(?:(?:0?[13578]|1[02]|j(?:an|u[nl])|ma[ry]|aug|oct|dec)([-/.])(?:0?[1-9]|1[0-9]|2[0-9]|3[01]))|(?:(?:0[469]|11|apr|jun|sep|nov)([-/.])(?:0?[1-9]|[1-2][0-9]|30))|(?:(0?2|feb)([-/.])(?:0?[1-9]|1[0-9]|2[0-8]))))|(?:(?:\\d{2}(?:0[48]|[2468][048]|[13579][26]))|(?:(?:[02468][048])|[13579][26])00)([-/.])(0?2|feb)([-/.])29)$)"

https://www.debuggex.com/r/xVhik3zVmXVNkEdc